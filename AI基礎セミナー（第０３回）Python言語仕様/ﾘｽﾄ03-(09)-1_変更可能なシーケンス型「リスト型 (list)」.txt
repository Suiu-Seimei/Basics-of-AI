#************************************************************************/
# ﾘｽﾄ03-(09)-1_変更可能なシーケンス型「リスト型 (list)」
#************************************************************************/

#(１) 配列の宣言と初期化
#(1.1) 宣言のみ
listName = []

#(1.2) 宣言と同時に要素も追加(初期化)
listName = ["00","01","02"]
print("(1.2) 宣言と同時に要素も追加(初期化)：{0}".format(listName))

#(1.3) 宣言と同時に要素も追加(同一の値で個数指定で初期化)
listName = ["00"] * 2
print("(1.3) 宣言と同時に要素も追加(同一の値で個数指定で初期化)：{0}".format(listName))

#(1.4) 宣言と同時に要素も追加(同一の配列で個数指定で初期化)
listName = ["00","01","02"] * 2
print("(1.4) 宣言と同時に要素も追加(同一の配列で個数指定で初期化)：{0}".format(listName))

#(2) 配列の長さ、要素の参照
#(2.1) 要素数(長さ)を取得(len()関数)
listName = ["00","01","02"]
print("(2.1) 要素数(長さ)を取得(len()関数)：{0}".format(len(listName)))

#(2.2) 要素の参照(0以上のｲﾝﾃﾞｯｸｽで参照⇒最初の要素から参照)
listName = ["00","01","02"]
print("(2.2) 要素の参照(0以上のｲﾝﾃﾞｯｸｽで参照⇒最初の要素から参照)：listName[0]={0}".format(listName[0]))
print("(2.2) 要素の参照(0以上のｲﾝﾃﾞｯｸｽで参照⇒最初の要素から参照)：listName[2]={0}".format(listName[2]))

#(2.3) 要素の参照(ﾏｲﾅｽのｲﾝﾃﾞｯｸｽで参照⇒最後の要素から参照)
listName = ["00","01","02"]
print("(2.3) 要素の参照(ﾏｲﾅｽのｲﾝﾃﾞｯｸｽで参照⇒最後の要素から参照)：listName[-1]={0}".format(listName[-1]))
print("(2.3) 要素の参照(ﾏｲﾅｽのｲﾝﾃﾞｯｸｽで参照⇒最後の要素から参照)：listName[-3]={0}".format(listName[-3]))

#(3) 要素の追加
#(3.1) 要素の追加(＋演算子による追加)
listName = ["00","01","02"]
listName = listName + ["03","04","05"]
print("(3.1) 要素の追加(＋演算子による追加)：{0}".format(listName))

#(3.2) 要素の追加(appendメソッドで、値指定によるによる追加)
listName = ["00","01","02"]
listName.append("30")
print("(3.2) 要素の追加(appendメソッドで、値指定によるによる追加)：{0}".format(listName))

#(3.3) 要素の追加(insertメソッドで、ｲﾝﾃﾞｸｽ指定による挿入)
listName = ["00","01","02"]
listName.insert(2,"30")   # 2 はｲﾝﾃﾞｸｽ (0始まり)
print("(3.3) 要素の追加(insertメソッドで、ｲﾝﾃﾞｸｽ指定による挿入)：{0}".format(listName))

#(4) 配列を結合
#(4.1) 配列を結合(extendメソッドで、配列を結合)
listName  = ["00","01","02"]
listName2 = ["03","04","05"]
listName.extend(listName2)
print("(4.1) 配列を結合(extendメソッドで、配列を結合)：{0}".format(listName))

#(4.2) 配列を結合(+演算子で、配列を結合)
listName1 = ["00","01","02"]
listName2 = ["03","04","05"]
listName = listName1 + listName2
print("(4.2) 配列を結合(+演算子で、配列を結合)：{0}".format(listName))

#(5) 要素の削除
#(5.1) 要素の削除(del文で、ｲﾝﾃﾞｸｽ指定による削除)
listName = ["00","01","02","03"]
del listName[2]   # 2 はｲﾝﾃﾞｸｽ (0始まり)
print("(5.1) 要素の削除(del文で、ｲﾝﾃﾞｸｽ指定による削除)：{0}".format(listName))

#(5.2) 要素の削除(popメソッドで、ｲﾝﾃﾞｸｽ指定による削除)
listName = ["00","01","02","03"]
listName.pop(2)   # 2 はｲﾝﾃﾞｸｽ (0始まり)
print("(5.2) 要素の削除(popメソッドで、ｲﾝﾃﾞｸｽ指定による削除)：{0}".format(listName))

#(5.3) 要素の削除(removeメソッドで、値指定による削除)
listName = ["00","01","02","03"]
listName.remove("02")   # "02" は値
print("(5.3) 要素の削除(removeメソッドで、値指定による削除)：{0}".format(listName))

#(6) range型との連携
#(6.1) range からリストを生成したい場合はlist()関数を使用
listName = list(range(3))
print("(6.1) range からリストを生成したい場合はlist()関数を使用：list(range(3))={0}".format(list(range(3))))
print("(6.1) range からリストを生成したい場合はlist()関数を使用：list(range(3, 10))={0}".format(list(range(3, 10))))

#(7) 要素の検索
#(7.1) 要素の検索(in演算子で、値指定による検索：True / False を返す)
listName = ["00","01","02","03"]
print("(7.1) 要素の検索(in演算子で、値指定による検索：True / False を返す)：{0}".format("02" in listName))  # "02" は値
print("(7.1) 要素の検索(in演算子で、値指定による検索：True / False を返す)：{0}".format("04" in listName))  # "04" は値

#(7.2) 要素の検索(indexメソッドで、値指定による検索)
listName = ["00","01","02","03"]
print("(7.2) 要素の検索(indexメソッドで、値指定による検索)：{0}".format(listName.index("02")))  # "02" は値
print(listName.index("04"))
#⇒ ValueError: '04' is not in list