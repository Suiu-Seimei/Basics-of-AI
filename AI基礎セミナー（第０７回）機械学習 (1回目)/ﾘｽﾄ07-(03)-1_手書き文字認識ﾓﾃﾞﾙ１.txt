#********************************************************************/
# ﾘｽﾄ07-(03)-1_手書き文字認識ﾓﾃﾞﾙ１
#--------------------------------------------------------------------
# 「手書き文字認識ﾓﾃﾞﾙ１」
#  ２層のﾌｨｰﾄﾞﾌｫﾜｰﾄﾞﾆｭｰﾗﾙﾈｯﾄﾜｰｸ（FNN）
#********************************************************************/
# 参照ﾗｲﾌﾞﾗﾘ
from keras.models import Sequential
from keras.layers import Dense, Activation
from keras.optimizers import Adam
import matplotlib.pyplot as plt
%matplotlib inline
import time

#********************************************************************/
# reshape_for_model1                                                */
# ﾛｰﾄﾞした MNIST ﾃﾞｰﾀを「手書き文字認識ﾓﾃﾞﾙ１」                     */
# 用に変形したものを返す                                            */
#-------------------------------------------------------------------*/
# 引数：                                                            */
#   in_image ：入力画像：uint8（入力画像枚数,28,28)                 */
#   in_label ：入力画像が表す数値（0〜9）：uint8（入力画像枚数)     */
#-------------------------------------------------------------------*/
# 戻り値：                                                          */
#  (1) in_image を                                                  */
#    「３次元(入力画像枚数,28,28)、uint8(0〜255)」から              */
#    「２次元(入力画像枚数,784)、float32(0.0〜1.0)」へ正規化したもの*/
#  (2) in_label を                                                  */
#    「１次元(入力画像枚数)、uint8(0〜8：入力画像が表す数値)）から  */
#　　「1-of-k 符号化」で 10ｸﾗｽへ分類し「２次元(入力画像枚数,10)」   */
#     各ｸﾗｽへの所属確率を float32(0.0〜1.0)で表現したもの           */
#     へ変換したもの                                                */
#********************************************************************/
def reshape_for_model1(in_image, in_label):
    out_image = in_image.reshape(in_image.shape[0], \
                                 in_image.shape[1]*in_image.shape[2])
    out_image = out_image.astype('float32')
    out_image = out_image / IMG_GRAY_LEVEL
    out_label = np_utils.to_categorical(in_label, IMG_CLASS_NO)
    return  out_image, out_label


#********************************************************************/
# make_and_evaluate_model1                                          */
# 「手書き文字認識ﾓﾃﾞﾙ１」を作成してそれを評価する                  */
#   隠れ層の活性化関数は引数で指定可能                              */
#-------------------------------------------------------------------*/
# 「手書き文字認識ﾓﾃﾞﾙ１」                                          */
#  ２層のﾌｨｰﾄﾞﾌｫﾜｰﾄﾞﾆｭｰﾗﾙﾈｯﾄﾜｰｸ（FNN）                              */
# (1) 入力層から出力層に向けて一方通行で流れる(Sequential)。        */
# (2) 入力層のﾉｰﾄﾞ数は、784 (=28×28,                               */
# 　　つまり２次元画像を一次元化したもの)である。                   */
# 　　値は、[0〜255]の 256 諧調のところを、                         */
# 　　255 で割って[0〜1] に正規化したものを用いる。                 */
# 　　入力層の各ﾉｰﾄﾞは中間層の各ﾉｰﾄﾞとの間で、                      */
# 　　完全に接続させる(全結合)。                                    */
#                                                                   */
# (3) 入力と出力の間に、１つの中間層（隠れ層）を置く。              */
# 　　中間層のﾉｰﾄﾞ数は、16 である。                                 */
# 　　中間層の活性化関数として「sigmoid」または「relu」を用いる。   */
# 　　中間層の各ﾉｰﾄﾞは出力層の各ﾉｰﾄﾞとの間で、                      */
# 　　完全に接続させる(全結合)。                                    */
#                                                                   */
# (4) 出力層のﾉｰﾄﾞ数は、10 (入力画像の文字の種類(0〜9)の数)である。 */
# 　　ﾃﾞｰﾀ型は「float32 (入力画像枚数,10)」で、                     */
# 　　入力画像の各ｸﾗｽへの所属確率[0〜1]を表す。                     */
# 　　出力層の活性化関数は「softmax」                               */
#                                                                   */
# (7) 損失関数(誤差を計算する関数)は「categorical_crossentropy」    */
# (8) 学習方法(ﾓﾃﾞﾙの最適化方法)は「Adam」                          */
# (9) 学習時には「ｴﾎﾟｯｸ数」として10、                               */
# 　 「ﾊﾞｯﾁｻｲｽﾞ」として「1000」で学習を行う。                       */
#-------------------------------------------------------------------*/
# 引数：                                                            */
#   title    : 表示用ﾀｲﾄﾙ                                           */
#   actvFunc : 隠れ層の活性化関数                                   */
#-------------------------------------------------------------------*/
# 戻り値：                                                          */
#   (1) 作成したﾓﾃﾞﾙ                                                */
#********************************************************************/
def make_and_evaluate_model1(title, actvFunc):

    print("*********************************************************")
    print(title)
    print("*********************************************************")

    #=================================================================
    # ﾛｰﾄﾞしたMNIST ﾃﾞｰﾀを「手書き文字認識ﾓﾃﾞﾙ１」用に変形する。
    #=================================================================
    inTrain1, outTrain1 = reshape_for_model1(x_train, y_train)
    inTest1, outTest1 = reshape_for_model1(x_test, y_test)

    titlestr = ["modified ...", "inTrain1", "outTrain1", "inTest1", "outTest1"]
    print_MNIST_attr(titlestr, inTrain1, outTrain1, inTest1, outTest1)
         
    #=================================================================
    # 「手書き文字認識ﾓﾃﾞﾙ１」を作成
    #=================================================================
    np.random.seed(1)
    predModel = Sequential()
    predModel.add(Dense(16, input_dim=inTrain1.shape[1], activation=actvFunc))
    predModel.add(Dense(IMG_CLASS_NO, activation='softmax'))
    predModel.compile(loss='categorical_crossentropy',
        optimizer=Adam(), metrics=['accuracy'])
    predModel.summary()

    #=================================================================
    # 「手書き文字認識ﾓﾃﾞﾙ１」を学習し、
    # 学習状況を、ｴﾎﾟｯｸ回数の時系列でｸﾞﾗﾌ表示する
    #=================================================================
    epochNo = 10
    batchSize = 1000

    startTime = time.time()
    history = predModel.fit(inTrain1, outTrain1, 
        epochs=epochNo, batch_size=batchSize,
        verbose=0, validation_data=(inTest1, outTest1))
    score = predModel.evaluate(inTest1, outTest1, verbose=0)
    endTime = time.time()

    plot_learning_curve( history, epochNo )

    print('Test loss:', score[0])
    print('Test accuracy:', score[1])
    print("Computation time:{0:.3f} sec".format(endTime - startTime))

    #=================================================================
    # 「手書き文字認識ﾓﾃﾞﾙ１」で、
    # MINTSTの検証用ﾃﾞｰﾀの最初の50枚で分類結果を表示する。
    #=================================================================
    pred_test_and_show_result(predModel, inTest1, y_test, IMG_SIZE_X, IMG_SIZE_Y, 50)
    
    return predModel


#********************************************************************/
# 「手書き文字認識ﾓﾃﾞﾙ１」で
#  活性化関数を「sigmoid」でﾓﾃﾞﾙを作成して実行する
#********************************************************************/
predModel1_1 = make_and_evaluate_model1(
    "「２層のﾌｨｰﾄﾞﾌｫﾜｰﾄﾞﾆｭｰﾗﾙﾈｯﾄﾜｰｸ（FNN）」で活性化関数は「sigmoid」",'sigmoid')

# 「手書き文字認識ﾓﾃﾞﾙ１」で、自作の画像の分類結果を表示する。
pred_myData_and_show_result("手書き文字認識ﾓﾃﾞﾙ１（FNN, sigmoid）", predModel1_1, reshape_for_model1)


#********************************************************************/
# 「手書き文字認識ﾓﾃﾞﾙ１」で 
#  活性化関数を「relu」でﾓﾃﾞﾙを作成して実行する
#********************************************************************/
predModel1_2 = make_and_evaluate_model1(
    "「２層のﾌｨｰﾄﾞﾌｫﾜｰﾄﾞﾆｭｰﾗﾙﾈｯﾄﾜｰｸ（FNN）」で活性化関数は「relu」",'relu')

# 「手書き文字認識ﾓﾃﾞﾙ１」で、自作の画像の分類結果を表示する。
pred_myData_and_show_result("手書き文字認識ﾓﾃﾞﾙ１（FNN, relu）", predModel1_2, reshape_for_model1)

