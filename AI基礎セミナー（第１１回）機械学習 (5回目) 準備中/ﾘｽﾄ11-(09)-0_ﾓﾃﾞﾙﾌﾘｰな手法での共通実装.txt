#*************************************************************************
#  ﾘｽﾄ11-(09)-0_ﾓﾃﾞﾙﾌﾘｰな手法での共通実装
#*************************************************************************
import numpy as np
import time
import copy
import matplotlib.pyplot as plt
%matplotlib inline


#*************************************************************************
# ｸﾗｽ     Environment
#-------------------------------------------------------------------------
# 崖歩きの環境のｸﾗｽ
#*************************************************************************
class Environment:

  #***********************************************************************
  # Environment ｸﾗｽ : ｺﾝｽﾄﾗｸﾀ
  #-----------------------------------------------------------------------
  # 以下のｲﾝｽﾀﾝｽ変数を定義する：
  #
  #    cliff_img    ：崖歩きの格子点情報 (縦4×横12)
  #                     ・'S'：開始点
  #                     ・'G'：目標点
  #                     ・'X'：崖領域の格子点
  #                     ・上記以外：歩行者が移動可能な格子点
  #-----------------------------------------------------------------------
  #    cliff        ：崖歩きの格子点情報を配列で表現
  #    size_y,size_x：崖歩きの格子点ﾃﾞｰﾀのｻｲｽﾞ（X方向,Y方向）
  #    states       ：状態値s（＝現在の位置座標(x,y)）の集合Ｓ
  #    state_ini    ：初期状態値（＝開始点の位置座標(x,y)）
  #
  #***********************************************************************
  def __init__(self):
    self.cliff_img = '''
++++++++++++
++++++++++++
++++++++++++
SXXXXXXXXXXG
'''

    # 崖歩きの格子点ﾃﾞｰﾀを、行上で配置情報を表す文字の配列を1行とし、行の配列で格納する
    #      'S':開始点、'G':目標点、'X':崖領域、'':左記以外の通行可能領域
    self.cliff = []
    for line in self.cliff_img.split('\n'):
      if line == '':
        continue 
      self.cliff.append(list(line))

    # 崖歩きの格子点ﾃﾞｰﾀのｻｲｽﾞ（X方向,Y方向）
    self.size_y, self.size_x = len(self.cliff), len(self.cliff[0])

    # 状態値s（＝現在の位置座標(x,y)）の集合Ｓをﾀﾌﾟﾙ型(x,y)の配列として保持する
    self.states = [(x, y) for x in range(self.size_x) for y in range(self.size_y)]
    
    # 初期状態値s0（＝開始点の位置座標(x,y)）ﾀﾌﾟﾙ型(x,y)として保持する
    for y in range(self.size_y):
      for x in range(self.size_x):
        if self.cliff[y][x] == 'S':
          self.state_ini = (x, y)
          break

  #***********************************************************************
  # Environment ｸﾗｽ : getCliff
  # 崖歩きの格子点情報を配列で取得するﾒｿｯﾄﾞ
  #-----------------------------------------------------------------------
  # 引数：なし
  #-----------------------------------------------------------------------
  # 戻り値：
  # (第１返値) cliff : 崖歩きの格子点情報
  #***********************************************************************
  def getCliff(self):
    return self.cliff

  #***********************************************************************
  # Environment ｸﾗｽ : transit
  # 状態s で行動a を取った時の状態遷移に伴う
  # 報酬Ｒss'a、次の状態s'を返す。
  #-----------------------------------------------------------------------
  # 引数：
  #   s    ： 現在の状態s (＝現在の位置座標(x,y)）
  #   a    ： 状態s でとる行動a（＝移動ﾍﾞｸﾄﾙ(Δx,Δy)）
  #-----------------------------------------------------------------------
  # 戻り値：
  # (第１返値) r  : 状態s で行動a を取った時の状態s'への遷移に伴う報酬Ｒss'a
  #                     0：目標点'G'への移動
  #                  -100：崖領域'X' への移動
  #                    -1：上記以外
  # (第２返値) s' : 状態s で行動a を取った時の遷移先の状態s'
  #                 (＝状態遷移後の位置座標(x',y')）)
  #***********************************************************************
  def transit(self, s, a):
        
    # 現在の状態s (＝位置座標(x,y)）
    x, y = s
    # 現在の状態s でとる行動a (＝移動量(Δx,Δy)）)
    dx, dy = a

    # 現在位置が出口の場合、状態・報酬共に不変
    if self.cliff[y][x] == 'G':
      return 0, s

    # 次状態へ遷移した場合、範囲外なら遷移せずに、報酬は -1
    if (y+dy < 0) or (y+dy >= self.size_y) :
        return -1, (x, y)
    if (x+dx < 0) or (x+dx >= self.size_x) :
        return -1, (x, y)

    # 次状態へ遷移した場合、崖領域'X' なら開始点'S'に戻る、報酬は -100
    if self.cliff[y+dy][x+dx] == 'X':
        x, y = self.state_ini
        return -100, (x, y)

    # 上記以外の場合、行動a のとおりに遷移を行う
    x += dx
    y += dy

    # 次状態へ遷移した場合、出口'G' なら、報酬は 0
    if self.cliff[y][x] == 'G':
        return 0, (x, y)

    # 上記以外なら、報酬は -1
    return -1, (x, y)


#*************************************************************************
# ｸﾗｽ     ShowFunc
#-------------------------------------------------------------------------
# 計算情報表示用ｸﾗｽ
#*************************************************************************
class ShowFunc:

  #***********************************************************************
  # ShowFunc ｸﾗｽ : showLearningCurve
  #-----------------------------------------------------------------------
  # 方策πの学習で、1ｴﾋﾟｿｰﾄﾞ毎の状態遷移数の履歴をｸﾞﾗﾌ表示する
  #-----------------------------------------------------------------------
  # 引数：
  #   episodeLengthHistory ：1ｴﾋﾟｿｰﾄﾞ分の状態遷移数の履歴
  #***********************************************************************
  def showLearningCurve(self, episodeLengthHistory):
    xlist = range(len(episodeLengthHistory))
    plt.figure(figsize=(12,3))
    plt.plot( xlist, episodeLengthHistory, 'cornflowerblue', linewidth=3 )
    plt.title("Transition count every episode")
    plt.xlabel("Episode no")
    plt.ylabel("count")
    plt.grid(True)
    plt.show()

  #***********************************************************************
  # ShowFunc ｸﾗｽ : showQ
  #-----------------------------------------------------------------------
  # 行動価値関数Ｑπ(s,a)を表示する
  #-----------------------------------------------------------------------
  # 引数：
  #   agent   ：Agent のｲﾝｽﾀﾝｽ
  #   env     ：Environment のｲﾝｽﾀﾝｽ
  #***********************************************************************
  def showQ(self, agent, env):
    # 出力ﾏｯﾌﾟ
    maptbl = [['　' for x in range(env.size_x)] for y in range(env.size_y)]

    # 出力ﾏｯﾌﾟに写しこみ  
    for s in env.states:
      x, y = s
      aq_xy = ""
      for a in agent.actions:
        dx, dy = a
        q = agent.q[(s, a)]

        footprint = '　'
        if( dx == 0 and dy == -1 ):
          footprint = '↑'
        elif( dx == 0 and dy == 1 ):
          footprint = '↓'
        elif( dx == 1 and dy == 0 ):
          footprint = '→'
        elif( dx == -1 and dy == 0 ):
          footprint = '←'
        aq_xy = "{0}  {1}:{2:+7.2f}".format(aq_xy, footprint, q)
      maptbl[y][x] = aq_xy
          
    # 出力ﾏｯﾌﾟを表示  
    print("行動価値関数Ｑπ(s,a)")
    for y in range(env.size_y):
      print("Y={0:3}: ".format(y))
      for x in range(env.size_x):
         print("({0:3},{1:3}):{2}".format(x, y, maptbl[y][x]))
    print("")

  #***********************************************************************
  # ShowFunc ｸﾗｽ : showFootprint
  #-----------------------------------------------------------------------
  # 1ｴﾋﾟｿｰﾄﾞ分の足跡を出力する
  #-----------------------------------------------------------------------
  # 引数：
  #   agent   ：Agent のｲﾝｽﾀﾝｽ
  #   env     ：Environment のｲﾝｽﾀﾝｽ
  #   episode ：1ｴﾋﾟｿｰﾄﾞ分の状態遷移情報
  #***********************************************************************
  def showFootprint(self, agent, env, episode):

    # 状態遷移数
    print("ｴﾋﾟｿｰﾄﾞの状態遷移数：{0}".format(len(episode)))

    # 結果表示内容を初期化
    result = np.copy(env.cliff)
    for y in range(env.size_y):
      for x in range(env.size_x):
        if(result[y][x] == 'X' ):
          result[y][x] = '■'
        elif(result[y][x] == 'S' ):
          result[y][x] = 'Ｓ'
        elif(result[y][x] == 'G' ):
          result[y][x] = 'Ｇ'
        else:
          result[y][x] = '　'

    # 1ｴﾋﾟｿｰﾄﾞ分を取得する
    for (s, a, r) in episode:
      # 位置
      x, y = s
      
      # 方向
      dx, dy = a
      footprint = '＋'
      if( dx == 0 and dy == -1 ):
        footprint = '↑'
      elif( dx == 0 and dy == 1 ):
        footprint = '↓'
      elif( dx == 1 and dy == 0 ):
        footprint = '→'
      elif( dx == -1 and dy == 0 ):
        footprint = '←'

      # 格子上に足跡を残す
      result[y][x] = footprint

    #  1ｴﾋﾟｿｰﾄﾞ分の足跡を出力
    print("　＋", end="")
    for x in range(env.size_x):
      print("−", end="")
    print("＋")

    ycoord = 0
    for y in range(env.size_y):
      print("{0:2d}｜".format(ycoord), end="")
      for x in range(env.size_x):
        print(result[y][x], end="")
      print("｜")
      ycoord += 1
      
    print("　＋", end="")
    for x in range(env.size_x):
      print("−", end="")
    print("＋")
    print("　　", end="")
    for x in range(env.size_x):
      print("{0:2d}".format(x), end="")
    print()
